{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/matheuschimendes/restaurant-app/app/pages/api/produto/%5Bid%5D/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nconst prisma = new PrismaClient();\n\ntype Produto = {\n  id: number;\n  nomeProduto: string; // Corrigido para nomeProduto\n  preco: number;\n  tipo: \"comida\" | \"sobremesa\";\n  descricao?: string\n};\n\n// GET: Retorna todos os produtos\nexport async function GET() {\n  try {\n    const produtos = await prisma.produto.findMany(); // Buscando todos os produtos\n    return NextResponse.json(produtos);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      return NextResponse.json({ message: \"Erro ao buscar produtos.\", error: error.message }, { status: 500 });\n    }\n    return NextResponse.json({ message: \"Erro desconhecido ao buscar produtos.\" }, { status: 500 });\n  }\n}\n\n// POST: Cria um novo produto\nexport async function POST(request: NextRequest) {\n  try {\n    const { nomeProduto, preco, tipo, descricao }: Produto = await request.json(); // Corrigido para nomeProduto\n\n    if (!nomeProduto || preco <= 0 || !tipo) {\n      return NextResponse.json({ message: \"Dados do produto inválidos!\" }, { status: 400 });\n    }\n\n    const novoProduto = await prisma.produto.create({\n      data: {\n        nomeProduto, // Corrigido para nomeProduto\n        preco,\n        tipo,\n        descricao,\n      },\n    });\n\n    return NextResponse.json(novoProduto, { status: 201 });\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      return NextResponse.json({ message: \"Erro ao criar produto.\", error: error.message }, { status: 500 });\n    }\n    return NextResponse.json({ message: \"Erro desconhecido ao criar produto.\" }, { status: 500 });\n  }\n}\n\n// PUT: Atualiza um produto existente\nexport async function PUT(request: NextRequest) {\n  try {\n    const { id, nomeProduto, preco, tipo, descricao }: Produto = await request.json(); // Corrigido para nomeProduto\n\n    const produtoExistente = await prisma.produto.findUnique({\n      where: { id },\n    });\n\n    if (!produtoExistente) {\n      return NextResponse.json({ message: \"Produto não encontrado!\" }, { status: 404 });\n    }\n\n    const produtoAtualizado = await prisma.produto.update({\n      where: { id },\n      data: {\n        nomeProduto, // Corrigido para nomeProduto\n        preco,\n        tipo,\n        descricao\n      },\n    });\n\n    return NextResponse.json(produtoAtualizado);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      return NextResponse.json({ message: \"Erro ao atualizar produto.\", error: error.message }, { status: 500 });\n    }\n    return NextResponse.json({ message: \"Erro desconhecido ao atualizar produto.\" }, { status: 500 });\n  }\n}\n\n// DELETE: Deleta um produto\nexport async function DELETE(request: NextRequest) {\n  try {\n    const url = new URL(request.url);\n    const id = parseInt(url.pathname.split(\"/\").pop() || \"\", 10); // Extrai o ID da URL\n\n    if (isNaN(id)) {\n      return NextResponse.json({ message: \"ID inválido!\" }, { status: 400 });\n    }\n\n    const produtoExistente = await prisma.produto.findUnique({\n      where: { id },\n    });\n\n    if (!produtoExistente) {\n      return NextResponse.json({ message: \"Produto não encontrado!\" }, { status: 404 });\n    }\n\n    await prisma.produto.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ message: \"Produto excluído com sucesso!\" });\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      return NextResponse.json({ message: \"Erro ao excluir produto.\", error: error.message }, { status: 500 });\n    }\n    return NextResponse.json({ message: \"Erro desconhecido ao excluir produto.\" }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}