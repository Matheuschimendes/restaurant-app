{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/matheuschimendes/restaurant-app/app/pages/api/produto/%5Bid%5D/route.tsx"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport fs from \"fs\";\nimport formidable from \"formidable\";\nimport path from \"path\";\n\nconst prisma = new PrismaClient();\n\n// Tipo para o Produto\ntype Produto = {\n  id?: number; // `id` é opcional para POST\n  nomeProduto: string;\n  preco: number;\n  tipo: \"espeto\" | \"sobremesa\" | \"acompanhamento\" | \"bebidas\";\n  descricao?: string;\n  imagem?: string; // imagemUrl como opcional\n};\n\nexport const config = {\n  api: {\n    bodyParser: false, // Desativa o body parser padrão, já que vamos usar o formidable\n  },\n};\n\n// GET: Retorna todos os produtos\nexport async function GET() {\n  try {\n    const produtos = await prisma.produto.findMany(); // Buscando todos os produtos\n    return NextResponse.json(produtos, { status: 200 });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    return NextResponse.json({ message: \"Erro ao buscar produtos.\", error: errorMessage }, { status: 500 });\n  }\n}\n\n// POST: Cria um novo produto\nexport async function POST(request: NextRequest) {\n  try {\n    const form = new formidable.IncomingForm();\n    \n    return new Promise((resolve, reject) => {\n      form.parse(request, async (err, fields, files) => {\n        if (err) {\n          reject(new Error(\"Erro ao processar o formulário\"));\n        }\n\n        const { nomeProduto, preco, tipo, descricao } = fields;\n        const imagem = files.imagem ? files.imagem[0] : null;\n\n        // Verificar se os campos obrigatórios estão presentes\n        if (!nomeProduto || preco <= 0 || !tipo) {\n          return NextResponse.json({ message: \"Dados do produto inválidos!\" }, { status: 400 });\n        }\n\n        // Se houver imagem, mover para o diretório 'uploads'\n        let imagemUrl = undefined;\n        if (imagem) {\n          const imagemPath = path.join(\"./public/uploads\", imagem.newFilename);\n          fs.renameSync(imagem.filepath, imagemPath);\n          imagemUrl = `/uploads/${imagem.newFilename}`;\n        }\n\n        // Criando o novo produto no banco de dados\n        const novoProduto = await prisma.produto.create({\n          data: { nomeProduto, preco, tipo, descricao, imagemUrl },\n        });\n\n        resolve(NextResponse.json(novoProduto, { status: 201 }));\n      });\n    });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    return NextResponse.json({ message: \"Erro ao criar produto.\", error: errorMessage }, { status: 500 });\n  }\n}\n\n// PUT: Atualiza um produto existente\nexport async function PUT(request: NextRequest) {\n  try {\n    const form = new formidable.IncomingForm();\n    \n    return new Promise((resolve, reject) => {\n      form.parse(request, async (err, fields, files) => {\n        if (err) {\n          reject(new Error(\"Erro ao processar o formulário\"));\n        }\n\n        const { id, nomeProduto, preco, tipo, descricao } = fields;\n        const imagem = files.imagem ? files.imagem[0] : null;\n\n        // Verificar se o id é válido\n        if (!id || id <= 0) {\n          return NextResponse.json({ message: \"ID inválido!\" }, { status: 400 });\n        }\n\n        // Verifica se o produto existe\n        const produtoExistente = await prisma.produto.findUnique({\n          where: { id: Number(id) },\n        });\n\n        if (!produtoExistente) {\n          return NextResponse.json({ message: \"Produto não encontrado!\" }, { status: 404 });\n        }\n\n        // Se houver imagem, mover para o diretório 'uploads'\n        let imagemUrl = produtoExistente.imagemUrl;\n        if (imagem) {\n          const imagemPath = path.join(\"./public/uploads\", imagem.newFilename);\n          fs.renameSync(imagem.filepath, imagemPath);\n          imagemUrl = `/uploads/${imagem.newFilename}`;\n        }\n\n        // Atualizando o produto no banco de dados\n        const produtoAtualizado = await prisma.produto.update({\n          where: { id: Number(id) },\n          data: { nomeProduto, preco, tipo, descricao, imagemUrl },\n        });\n\n        resolve(NextResponse.json(produtoAtualizado, { status: 200 }));\n      });\n    });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    return NextResponse.json({ message: \"Erro ao atualizar produto.\", error: errorMessage }, { status: 500 });\n  }\n}\n\n// DELETE: Deleta um produto\nexport async function DELETE(request: NextRequest) {\n  try {\n    const url = new URL(request.url);\n    const id = parseInt(url.pathname.split(\"/\").pop() || \"\", 10); // Extrai o ID da URL\n\n    if (isNaN(id) || id <= 0) {\n      return NextResponse.json({ message: \"ID inválido!\" }, { status: 400 });\n    }\n\n    const produtoExistente = await prisma.produto.findUnique({\n      where: { id },\n    });\n\n    if (!produtoExistente) {\n      return NextResponse.json({ message: \"Produto não encontrado!\" }, { status: 404 });\n    }\n\n    await prisma.produto.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ message: \"Produto excluído com sucesso!\" }, { status: 200 });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    return NextResponse.json({ message: \"Erro ao excluir produto.\", error: errorMessage }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}