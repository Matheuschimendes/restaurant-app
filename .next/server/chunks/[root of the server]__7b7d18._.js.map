{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/matheuschimendes/restaurant-app/app/pages/api/produto/%5Bid%5D/route.tsx"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\nimport fs from \"fs\";\nimport formidable from \"formidable\";\nimport path from \"path\";\n\nconst prisma = new PrismaClient();\n\n// Desabilitar o body parser para usar formidable\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n// PUT: Atualizar um produto existente\nexport async function PUT(request: NextRequest) {\n  try {\n    const form = new formidable.IncomingForm();\n    const id = parseInt(request.url.split(\"/\").pop() || \"\", 10); // Obtém o ID da URL\n\n    return new Promise((resolve, reject) => {\n      form.parse(request, async (err, fields, files) => {\n        if (err) {\n          reject(new Error(\"Erro ao processar o formulário\"));\n        }\n\n        const { nomeProduto, preco, tipo, descricao } = fields;\n        const imagem = files.imagem ? files.imagem[0] : null;\n\n        if (!id || isNaN(id)) {\n          return NextResponse.json({ message: \"ID inválido!\" }, { status: 400 });\n        }\n\n        const produtoExistente = await prisma.produto.findUnique({\n          where: { id },\n        });\n\n        if (!produtoExistente) {\n          return NextResponse.json({ message: \"Produto não encontrado!\" }, { status: 404 });\n        }\n\n        let imagemUrl = produtoExistente.imagemUrl;\n        if (imagem) {\n          const imagemPath = path.join(\"./public/uploads\", imagem.newFilename);\n          fs.renameSync(imagem.filepath, imagemPath);\n          imagemUrl = `/uploads/${imagem.newFilename}`;\n        }\n\n        const produtoAtualizado = await prisma.produto.update({\n          where: { id },\n          data: { nomeProduto, preco, tipo, descricao, imagemUrl },\n        });\n\n        resolve(NextResponse.json(produtoAtualizado, { status: 200 }));\n      });\n    });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    return NextResponse.json({ message: \"Erro ao atualizar produto.\", error: errorMessage }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AADA;;;;;;AAGA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,IAAI,4JAAA,CAAA,UAAU,CAAC,YAAY;QACxC,MAAM,KAAK,SAAS,QAAQ,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,IAAI,KAAK,oBAAoB;QAEjF,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,KAAK,KAAK,CAAC,SAAS,OAAO,KAAK,QAAQ;gBACtC,IAAI,KAAK;oBACP,OAAO,IAAI,MAAM;gBACnB;gBAEA,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG;gBAChD,MAAM,SAAS,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,EAAE,GAAG;gBAEhD,IAAI,CAAC,MAAM,MAAM,KAAK;oBACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBAAE,SAAS;oBAAe,GAAG;wBAAE,QAAQ;oBAAI;gBACtE;gBAEA,MAAM,mBAAmB,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;oBACvD,OAAO;wBAAE;oBAAG;gBACd;gBAEA,IAAI,CAAC,kBAAkB;oBACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBAAE,SAAS;oBAA0B,GAAG;wBAAE,QAAQ;oBAAI;gBACjF;gBAEA,IAAI,YAAY,iBAAiB,SAAS;gBAC1C,IAAI,QAAQ;oBACV,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,oBAAoB,OAAO,WAAW;oBACnE,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,OAAO,QAAQ,EAAE;oBAC/B,YAAY,CAAC,SAAS,EAAE,OAAO,WAAW,EAAE;gBAC9C;gBAEA,MAAM,oBAAoB,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;oBACpD,OAAO;wBAAE;oBAAG;oBACZ,MAAM;wBAAE;wBAAa;wBAAO;wBAAM;wBAAW;oBAAU;gBACzD;gBAEA,QAAQ,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,mBAAmB;oBAAE,QAAQ;gBAAI;YAC7D;QACF;IACF,EAAE,OAAO,OAAgB;QACvB,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA8B,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IACzG;AACF"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}